import { demoParserService } from "@/lib/server-parse-services/demo-parser-service";
import { downloadService } from "@/lib/server-parse-services/download-service";
import { MatchesService } from "@/lib/server-parse-services/matchesService";
import { prismaSessionStore } from "@/lib/server-parse-services/prisma-session-store";

import { validateMatchesInput } from "@/lib/validation/match-validation";
import { Match, MatchesResponse, MatchNew } from "@/types";
import { NextResponse, NextRequest } from "next/server";

const matchesService: MatchesService = new MatchesService();

// –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ URL –º–∞—Ç—á–µ–π
const FASTCUP_URL_REGEX = /https:\/\/cs2\.fastcup\.net\/matches\/\d+/;
const CYBERSHOKE_URL_REGEX = /https:\/\/cybershoke\.net\/\w+\/match\/\d+/;

// –û–±—â–µ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è URL
const MATCH_URL_REGEX = new RegExp(
  `(${FASTCUP_URL_REGEX.source}|${CYBERSHOKE_URL_REGEX.source})`,
  "g"
);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ URL –º–∞—Ç—á–∞
function isValidMatchUrl(url: string): boolean {
  return FASTCUP_URL_REGEX.test(url) || CYBERSHOKE_URL_REGEX.test(url);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤–∞–ª–∏–¥–Ω—ã—Ö –º–∞—Ç—á–µ–π
function filterValidMatches(matches: any[]): any[] {
  matches.forEach((match) => {
    const result = match.url.match(MATCH_URL_REGEX);
    if (result) match.url = result[0];
  });

  return matches.filter((m) => m.url && isValidMatchUrl(m.url));
}

export async function GET(request: Request) {
  try {
    const { searchParams } = new URL(request.url);

    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    const tournamentId = searchParams.get("tournamentId");
    const status = searchParams.get("status");
    const type = searchParams.get("type");

    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    const page = parseInt(searchParams.get("page") || "1");
    const limit = parseInt(searchParams.get("limit") || "20");
    const skip = (page - 1) * limit;

    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    const sortBy = searchParams.get("sortBy") || "createdAt";
    const sortOrder = searchParams.get("sortOrder") || "desc";

    // –°—Ç—Ä–æ–∏–º —Ñ–∏–ª—å—Ç—Ä
    const where: {
      tournamentId?: string;
      status?: string;
      type?: string;
    } = {};

    if (tournamentId) {
      where.tournamentId = tournamentId;
    }

    if (status) {
      where.status = status;
    }

    if (type) {
      where.type = type;
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    const [matches, total] = await Promise.all([
      matchesService.findAll({
        where,
        skip,
        take: limit,
        orderBy: { [sortBy]: sortOrder },
        include: {
          tournament: true,
          teams: true,
          maps: true,
        },
      }),
      matchesService.count({ where }),
    ]);

    // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    const totalPages = Math.ceil(total / limit);
    const hasNext = page < totalPages;
    const hasPrev = page > 1;

    return NextResponse.json({
      data: matches,
      pagination: {
        page,
        limit,
        total,
        totalPages,
        hasNext,
        hasPrev,
        nextPage: hasNext ? page + 1 : null,
        prevPage: hasPrev ? page - 1 : null,
      },
      filters: {
        tournamentId,
        status,
        type,
      },
    });
  } catch (error) {
    console.error("Failed to fetch matches:", error);
    return NextResponse.json(
      { error: "Failed to fetch matches" },
      { status: 500 }
    );
  }
}

export async function POST(request: NextRequest) {
  try {
    const body: MatchesResponse = await request.json();
    console.table(body);
    if (!body.matches) {
      return NextResponse.json(
        { error: "Missing matches array" },
        { status: 400 }
      );
    }

    validateMatchesInput(body.matches);

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ –º–∞—Ç—á–∏
    const validMatches = filterValidMatches(body.matches);

    const matchesProgress = validMatches.map((match) => ({
      url: match.url,
      tournamentId: match.tournamentId,
      platform: match.platform,
      status: "pending",
      progress: 0,
      currentStep: "Waiting to start",
    }));

    // ‚úÖ –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –≤ –ë–î
    const session = await prismaSessionStore.createSession(matchesProgress);

    console.log("‚úÖ Session created in database:", session.sessionId);
    console.log(matchesProgress);

    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    processMatchesAsync(session.sessionId, validMatches);

    return NextResponse.json({
      sessionId: session.sessionId,
      status: "processing_started",
      totalMatches: session.totalMatches,
      message: "Matches are being processed.",
    });
  } catch (error) {
    console.error("Error processing matches request:", error);
    return NextResponse.json({ error: error }, { status: 400 });
  }
}

// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Ç—á–µ–π (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç)
async function processMatchesAsync(sessionId: string, matches: MatchNew[]) {
  try {
    console.log(`Starting async processing for session: ${sessionId}`);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞—Ç—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º
    const parallelLimit = 1; // –ú–∞–∫—Å–∏–º—É–º 1 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    const chunks = [];

    for (let i = 0; i < matches.length; i += parallelLimit) {
      chunks.push(matches.slice(i, i + parallelLimit));
    }

    for (const chunk of chunks) {
      await Promise.all(
        chunk.map((match) => processSingleMatch(sessionId, match))
      );
    }

    console.log(`Completed processing for session: ${sessionId}`);
  } catch (error) {
    console.error("Error in async processing:", error);
  }
}

async function processSingleMatch(sessionId: string, match: any) {
  let demoPath: string | undefined;

  try {
    console.log(`üîµ Starting match processing: ${match.url}`);
    console.log(`Session ID: ${sessionId}`);

    // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
    const session = await prismaSessionStore.getSession(sessionId);

    if (!session) {
      throw new Error(`Session ${sessionId} not found at start`);
    }

    console.log(`‚úÖ Session verified, starting download...`);

    // 1. –°–∫–∞—á–∏–≤–∞–µ–º –¥–µ–º–æ
    await prismaSessionStore.updateMatchProgress(sessionId, match.url, {
      status: "downloading",
      progress: 30,
      currentStep: "Downloading demo",
    });

    const downloadResult = await downloadService.downloadDemo(
      sessionId,
      match.url,
      match.platform
    );

    if (!downloadResult.success || !downloadResult.demoPath) {
      throw new Error(`Download failed: ${downloadResult.error}`);
    }

    demoPath = downloadResult.demoPath;
    console.log(`‚úÖ Demo downloaded: ${demoPath}`);

    // 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø–∞—Ä—Å–∏–Ω–≥
    await prismaSessionStore.updateMatchProgress(sessionId, match.url, {
      status: "parsing",
      progress: 60,
      currentStep: "Sending to parser",
    });

    const parseResult = await demoParserService.parseDemo(
      sessionId,
      match.url,
      match.tournamentId,
      demoPath
    );

    if (!parseResult.success) {
      throw new Error(`Parse failed: ${parseResult.error}`);
    }

    console.log(`‚úÖ Demo sent to parser, waiting for callback...`);

    const waitStartTime = Date.now();
    const waitTimeout = 30000; // 30 —Å–µ–∫—É–Ω–¥

    while (Date.now() - waitStartTime < waitTimeout) {
      const session = await prismaSessionStore.getSession(sessionId);
      const matchProgress = session?.matches.find(
        (m: any) => m.url === match.url
      );

      if (matchProgress?.status === "completed") {
        console.log(`‚úÖ Callback received, parsing completed`);
        break;
      }

      if (matchProgress?.status === "error") {
        throw new Error(`Parsing failed: ${matchProgress.error}`);
      }

      // –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
      await new Promise((resolve) => setTimeout(resolve, 2000));
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç
    if (Date.now() - waitStartTime >= waitTimeout) {
      throw new Error("Parsing timeout - no callback received");
    }
    // 3. –ñ–¥–µ–º callback (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º - callback —Å–∞–º –æ–±–Ω–æ–≤–∏—Ç —Å—Ç–∞—Ç—É—Å)
    // –ü—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º - callback –æ–±–Ω–æ–≤–∏—Ç —Å—Ç–∞—Ç—É—Å –∫–æ–≥–¥–∞ –ø—Ä–∏–¥–µ—Ç
  } catch (error) {
    console.error(`‚ùå Error processing match ${match.url}:`, error);

    await prismaSessionStore.updateMatchProgress(sessionId, match.url, {
      status: "error",
    });

    // –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
    if (demoPath) {
      await downloadService.cleanupDemoFile(demoPath);
    }
  }
}
