import { demoParserService } from "@/lib/server-parse-services/demo-parser-service";
import { downloadService } from "@/lib/server-parse-services/download-service";
import { MatchesService } from "@/lib/server-parse-services/matchesService";
import { prismaSessionStore } from "@/lib/server-parse-services/prisma-session-store";
import { prisma } from "@/lib/prisma";
import { validateMatchesInput } from "@/lib/validation/match-validation";
import { Match, MatchesResponse, MatchNew } from "@/types";
import { NextResponse, NextRequest } from "next/server";

const matchesService: MatchesService = new MatchesService();

function filterValidMatches(matches: any[]) {
  return matches.filter((match) => {
    if (!match.url) return false;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
    const FASTCUP_URL_REGEX = /https:\/\/cs2\.fastcup\.net\/matches\/\d+/;
    const CYBERSHOKE_URL_REGEX = /https:\/\/cybershoke\.net\/\w+\/match\/\d+/;

    const urlMatch = match.url.match(/(https?:\/\/[^\s]+)/);
    const url = urlMatch ? urlMatch[0] : match.url;

    const isValid =
      FASTCUP_URL_REGEX.test(url) || CYBERSHOKE_URL_REGEX.test(url);

    if (isValid) {
      // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—É—é —á–∞—Å—Ç—å URL
      if (FASTCUP_URL_REGEX.test(url)) {
        const fastcupMatch = url.match(FASTCUP_URL_REGEX);
        match.url = fastcupMatch ? fastcupMatch[0] : url;
      } else if (CYBERSHOKE_URL_REGEX.test(url)) {
        const cybershokeMatch = url.match(CYBERSHOKE_URL_REGEX);
        match.url = cybershokeMatch ? cybershokeMatch[0] : url;
      }
    }

    return isValid;
  });
}

export async function GET(request: Request) {
  try {
    const { searchParams } = new URL(request.url);

    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    const tournamentId = searchParams.get("tournamentId");
    const status = searchParams.get("status");
    const type = searchParams.get("type");

    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    const page = parseInt(searchParams.get("page") || "1");
    const limit = parseInt(searchParams.get("limit") || "20");
    const skip = (page - 1) * limit;

    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    const sortBy = searchParams.get("sortBy") || "createdAt";
    const sortOrder = searchParams.get("sortOrder") || "desc";

    // –°—Ç—Ä–æ–∏–º —Ñ–∏–ª—å—Ç—Ä
    const where: {
      tournamentId?: string;
      status?: string;
      type?: string;
    } = {};

    if (tournamentId) {
      where.tournamentId = tournamentId;
    }

    if (status) {
      where.status = status;
    }

    if (type) {
      where.type = type;
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    const [matches, total] = await Promise.all([
      matchesService.findAll({
        where,
        skip,
        take: limit,
        orderBy: { [sortBy]: sortOrder },
        include: {
          tournament: true,
          teams: true,
          maps: true,
        },
      }),
      matchesService.count({ where }),
    ]);

    // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    const totalPages = Math.ceil(total / limit);
    const hasNext = page < totalPages;
    const hasPrev = page > 1;

    return NextResponse.json({
      data: matches,
      pagination: {
        page,
        limit,
        total,
        totalPages,
        hasNext,
        hasPrev,
        nextPage: hasNext ? page + 1 : null,
        prevPage: hasPrev ? page - 1 : null,
      },
      filters: {
        tournamentId,
        status,
        type,
      },
    });
  } catch (error) {
    console.error("Failed to fetch matches:", error);
    return NextResponse.json(
      { error: "Failed to fetch matches" },
      { status: 500 }
    );
  }
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();

    if (!body.matches) {
      return NextResponse.json(
        { error: "Missing matches array" },
        { status: 400 }
      );
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–∞—Ç—á–µ–π
    const validMatches = filterValidMatches(body.matches);

    const results: Array<{
      matchUrl: string;
      sessionId: string;
      status: string;
    }> = [];

    // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Ç—á–∞
    for (const match of validMatches) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–∞—Ç—á
      const existingMatch = await prisma.match.findUnique({
        where: { demoPath: match.url },
      });

      if (existingMatch) {
        results.push({
          matchUrl: match.url,
          sessionId: "already_exists",
          status: "skipped",
        });
        continue;
      }

      // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –º–∞—Ç—á–∞
      const individualSession = await prismaSessionStore.createSession([
        {
          url: match.url,
          tournamentId: match.tournamentId,
          platform: match.platform,
          status: "pending",
          progress: 0,
          currentStep: "Waiting to start",
        },
      ]);

      results.push({
        matchUrl: match.url,
        sessionId: individualSession.sessionId,
        status: "pending",
      });
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û (–ø–æ –æ–¥–Ω–æ–º—É –º–∞—Ç—á—É)
    processMatchesSequentially(results, validMatches);

    return NextResponse.json({
      results: results,
      total: results.length,
      processing: results.filter((r) => r.status === "pending").length,
      skipped: results.filter((r) => r.status === "skipped").length,
      message: "Matches are being processed sequentially (one by one)",
    });
  } catch (error) {
    console.error("Error processing matches request:", error);
    return NextResponse.json(
      {
        error: error instanceof Error ? error.message : "Unknown error",
      },
      { status: 400 }
    );
  }
}

// –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Ç—á–µ–π
async function processMatchesSequentially(results: any[], validMatches: any[]) {
  const processingMatches = results.filter((r) => r.status === "pending");

  console.log(
    `Starting SEQUENTIAL processing of ${processingMatches.length} matches`
  );

  for (let i = 0; i < processingMatches.length; i++) {
    const result = processingMatches[i];

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∞ –ø–æ URL
    const matchData = validMatches.find((m) => m.url === result.matchUrl);

    if (!matchData) {
      console.error(`Match data not found for URL: ${result.matchUrl}`);
      continue;
    }

    console.log(
      `üîµ Processing match ${i + 1}/${processingMatches.length}: ${result.matchUrl}`
    );

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–¥–∏–Ω –º–∞—Ç—á –∏ –ñ–î–ï–ú –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    await processSingleMatch(result.sessionId, matchData);

    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –º–∞—Ç—á–∞–º–∏ (2 —Å–µ–∫—É–Ω–¥—ã)
    if (i < processingMatches.length - 1) {
      console.log(`‚è∏Ô∏è Waiting 2 seconds before next match...`);
      await new Promise((resolve) => setTimeout(resolve, 2000));
    }
  }

  console.log(`‚úÖ Completed processing all matches sequentially`);
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ –º–∞—Ç—á–∞
async function processSingleMatch(sessionId: string, match: any) {
  let demoPath: string | undefined;

  try {
    console.log(`üîµ Starting match processing: ${match.url}`);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å - –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await prismaSessionStore.updateMatchProgress(sessionId, match.url, {
      status: "processing",
      progress: 10,
      currentStep: "Starting download",
    });

    // 1. –°–∫–∞—á–∏–≤–∞–µ–º –¥–µ–º–æ
    await prismaSessionStore.updateMatchProgress(sessionId, match.url, {
      status: "downloading",
      progress: 30,
      currentStep: "Downloading demo file",
    });

    const downloadResult = await downloadService.downloadDemo(
      sessionId,
      match.url,
      match.platform
    );

    if (!downloadResult.success || !downloadResult.demoPath) {
      throw new Error(`Download failed: ${downloadResult.error}`);
    }

    demoPath = downloadResult.demoPath;
    console.log(`‚úÖ Demo downloaded: ${demoPath}`);

    // 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø–∞—Ä—Å–∏–Ω–≥
    await prismaSessionStore.updateMatchProgress(sessionId, match.url, {
      status: "parsing",
      progress: 60,
      currentStep: "Sending demo to parser",
    });

    const parseResult = await demoParserService.parseDemo(
      sessionId,
      match.url,
      match.tournamentId,
      demoPath
    );

    if (!parseResult.success) {
      throw new Error(`Parse failed: ${parseResult.error}`);
    }

    console.log(`‚úÖ Demo sent to parser, waiting for callback...`);

    // 3. –ñ–¥–µ–º callback –æ—Ç –ø–∞—Ä—Å–µ—Ä–∞
    const waitStartTime = Date.now();
    const waitTimeout = 30000; // 30 —Å–µ–∫—É–Ω–¥
    let callbackReceived = false;

    while (Date.now() - waitStartTime < waitTimeout) {
      const session = await prismaSessionStore.getSession(sessionId);
      const matchProgress = session?.matches.find(
        (m: any) => m.url === match.url
      );

      if (matchProgress?.status === "completed") {
        console.log(`‚úÖ Callback received, parsing completed for ${match.url}`);
        callbackReceived = true;
        break;
      }

      if (matchProgress?.status === "error") {
        throw new Error(`Parsing failed: ${matchProgress.error}`);
      }

      // –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
      await new Promise((resolve) => setTimeout(resolve, 2000));
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç
    if (!callbackReceived) {
      throw new Error(
        "Parsing timeout - no callback received within 30 seconds"
      );
    }

    // 4. –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    console.log(`üéâ Match processing completed successfully: ${match.url}`);
  } catch (error) {
    console.error(`‚ùå Error processing match ${match.url}:`, error);

    await prismaSessionStore.updateMatchProgress(sessionId, match.url, {
      status: "error",
      error: error instanceof Error ? error.message : "Unknown error",
      currentStep: "Error occurred during processing",
    });
  } finally {
    // –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
    if (demoPath) {
      await downloadService.cleanupDemoFile(demoPath);
    }
  }
}
