// app/api/parse/callback/route.ts

import { databaseService } from "@/lib/server-parse-services/database-service";
import { prismaSessionStore } from "@/lib/server-parse-services/prisma-session-store";
import { NextRequest, NextResponse } from "next/server";

export async function POST(request: NextRequest) {
  try {
    const { sessionId, matchUrl } = await getParams(request);
    const result = await request.json();

    console.log(`üì® Callback received for ${matchUrl}`);

    if (result.success) {
      console.log("üíæ Saving parsed data to database tables...");

      // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –≤ —Ç–∞–±–ª–∏—Ü—ã –ë–î
      const matchId = await databaseService.saveParsedData(
        sessionId,
        matchUrl,
        result.data
      );

      // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å - —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å, –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö
      await prismaSessionStore.updateMatchProgress(sessionId, matchUrl, {
        status: "completed",
        progress: 100,
        currentStep: "Data saved to database",
        matchId: matchId, // —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –º–∞—Ç—á–∞
      });

      console.log(`‚úÖ Data saved to database, match ID: ${matchId}`);
    } else {
      await prismaSessionStore.updateMatchProgress(sessionId, matchUrl, {
        status: "error",
        error: result.error,
      });
    }

    return NextResponse.json({ status: "ok" });
  } catch (error) {
    console.error("‚ùå Error in callback:", error);

    // –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
    try {
      const { sessionId, matchUrl } = await getParams(request);
      await prismaSessionStore.updateMatchProgress(sessionId, matchUrl, {
        status: "error",
        error: `Database save failed: `,
      });
    } catch (e) {
      console.error("Failed to update error status:", e);
    }

    return NextResponse.json({ error: error }, { status: 500 });
  }
}

// lib/params-helper.ts
export async function getParams(request: NextRequest) {
  const { searchParams } = new URL(request.url);
  const sessionId = searchParams.get("sessionId");
  const matchUrl = searchParams.get("matchUrl");

  if (!sessionId || !matchUrl) {
    throw new Error("Missing sessionId or matchUrl parameters");
  }

  return { sessionId, matchUrl };
}
